####################################################################Initial Configuration####################################################################
CurrentDir=$(pwd)

installationDir=$CurrentDir
MAGNET=$CurrentDir

SourceData=$MAGNET
#######################################
# Stage 1: Quality Control	      #
#######################################

SamplesToQC=$MAGNET/Data/ExampleData

Hapmapfile=$MAGNET/RefData/hapmap_r23a

Siteinfo=$MAGNET/RefData/Hapmap_siteinfo.txt


#######################################
# Stage 2: Imputation 		      #
#######################################

AffectedInds=$MAGNET/Data/Dummy_Aff.txt

phenofile=$MAGNET/Data/Dummy_Phenotypes.txt

hg19SNPs=$MAGNET/RefData/SNPs_all.bed

MapFile=$MAGNET/RefData/genetic_map_b37

Chain16To19=$MAGNET/RefData/hg16ToHg19.over.chain.gz

Chain17To19=$MAGNET/RefData/hg17ToHg19.over.chain.gz

Chain18To19=$MAGNET/RefData/hg18ToHg19.over.chain.gz

Chain38To19=$MAGNET/RefData/hg38ToHg19.over.chain.gz

ChainToChoose=$Chain18To19


ShapeitRefHaps=$MAGNET/RefData/ALL_1000G_phase1integrated_v3_impute

ShapeitRefLegend=$MAGNET/RefData/ALL_1000G_phase1integrated_v3_impute

ShapeitRefSample=$MAGNET/RefData/ALL_1000G_phase1integrated_v3_impute

AnnotationFile=$MAGNET/RefData/AnnotationFiles_SNP142


MagmaRef=$MAGNET/RefData/g1000_eur

MagmaSNPloc=$MagmaRef.bim

MagmaGeneloc=$MAGNET/RefData/NCBI37.3.gene.loc



#######################################
# Stage 4: Enrichment		      #
#######################################

pheno="JA"
Genelist=$MAGNET/OUTPUT_DIR/Stage3_GWAS/$pheno.SignificantGenes.txt

KangUnivers=$MAGNET/RefData/KangUnivers.txt


GOelite=$MAGNET/MAIN_DIR/GOelite/GO-Elite_v.1.2.5-Py/GO_Elite.py
liftOver=$MAGNET/MAIN_DIR/liftOver/liftOver
magma=$MAGNET/MAIN_DIR/magma/magma
PLINK=$MAGNET/MAIN_DIR/PLINK/plink
R=/usr/bin/R
SHAPEIT=$MAGNET/MAIN_DIR/SHAPEIT/shapeit.v2.904.2.6.32-696.18.7.el6.x86_64/bin/shapeit
PERL=/usr/bin/perl
PYTHON=/usr/bin/python
sh=/usr/bin/bash

# Check whether the binary of a tool is executable, exit if not.
# This function is used in the Scripts of several stages.
# Usage: check_tool "PLINK" $PLINK
function check_tool {
    tool_name="$1"
    tool_binary_path="$2"
    if [ -z "$tool_name" ]; then
        echo "Missing parameter 1: tool_name."
        exit 1
    fi

    if [ -z "$tool_binary_path" ]; then
        echo "Missing parameter 2: Path for tool '$tool_name' is empty. Tool not configured properly."
        exit 1
    fi

    if [ ! -x "$tool_binary_path" ]; then
        if [ ! -f "$tool_binary_path" ]; then
            echo "Tool '$tool_name': no file found at path '$tool_binary_path'. Tool not configured properly."
        else
            echo "Tool '$tool_name' is not executable at path '$tool_binary_path'. Tool not configured properly, check permissions."
        fi
        exit 1
    fi
}
